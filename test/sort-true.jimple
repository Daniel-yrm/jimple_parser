public final class FooKt extends java.lang.Object
{

    public static final void sort(int[], int)
    {
        int[] r0;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, i11;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "arr");

        i9 = 0;

        i1 = i0 - 1;

        if 0 > i1 goto label5;

     label1:
        i2 = i9;

        i9 = i9 + 1;

        i10 = i2;

        i11 = i2;

        $i4 = i0 - 1;

        if i2 > $i4 goto label4;

     label2:
        i5 = i11;

        i11 = i11 + 1;

        $i7 = r0[i5];

        $i6 = r0[i10];

        if $i7 >= $i6 goto label3;

        i10 = i5;

     label3:
        if i5 != $i4 goto label2;

     label4:
        $i8 = r0[i2];

        $i3 = r0[i10];

        r0[i2] = $i3;

        r0[i10] = $i8;

        if i2 != i1 goto label1;

     label5:
        return;
    }

    public static final boolean is_sorted(int[], int)
    {
        int[] r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "arr");

        if i0 >= 2 goto label1;

        return 1;

     label1:
        i6 = 1;

        i1 = i0 - 1;

        if 1 > i1 goto label4;

     label2:
        i2 = i6;

        i6 = i6 + 1;

        $i5 = r0[i2];

        $i3 = i2 - 1;

        $i4 = r0[$i3];

        if $i5 >= $i4 goto label3;

        return 0;

     label3:
        if i2 != i1 goto label2;

     label4:
        return 1;
    }

    public static final void initialize_array(int[], int)
    {
        int[] r0;
        int i0, i1, i2, $i3, i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "arr");

        i4 = 0;

        i1 = i0 - 1;

        if 0 > i1 goto label2;

     label1:
        i2 = i4;

        i4 = i4 + 1;

        $i3 = i0 - i2;

        r0[i2] = $i3;

        if i2 != i1 goto label1;

     label2:
        return;
    }

    public static final void main()
    {
        int[] r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 = newarray (int)[20];

        staticinvoke <FooKt: void initialize_array(int[],int)>(r0, 20);

        staticinvoke <FooKt: void sort(int[],int)>(r0, 20);

        $z0 = staticinvoke <FooKt: boolean is_sorted(int[],int)>(r0, 20);

        $z1 = <kotlin._Assertions: boolean ENABLED>;

        if $z1 == 0 goto label1;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Assertion failed");

        throw $r1;

     label1:
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <FooKt: void main()>();

        return;
    }
}
